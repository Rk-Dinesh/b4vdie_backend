1. User Registration API

    http://localhost:4000/registration/

    {
        "fname":"Ravikumar",
        "lname":"S",
        "dob":"09/06/1995",
        "gender":"Male",
        "email":"ravipro9e0@gmail.com",
        "phone":"9629683500",
        "address":"Salem",
        "state":"Tamilnadu",
        "postcode":"123456",
        "password":"test"
    }

2. TRIP

{
    userid:
    name:
    tripid:
    tripname:
    start_date:
    end_date:
    start_point:
    end_point:

}

 http://localhost:4000/createtrip

{   "userid" : "BWD002",
    "fname" : "Ravikumar",
    "tripname" : "kerala",
    "start_date" : "12/08/2022",
    "end_date" : "12/09/2022",
    "start_point" : "India",
    "end_point" : "Hawala"
}

3. transport
{
    tripid:
    mode_of_tranport:
    from:
    to:

}

 http://localhost:4000/createtransport

{
   
    "tripid": "BWDT001",
    "mode_of_transport": "Bike",
    "from": "chennai",
    "to": "Banglore"
}

4. pitstop
{
    tripid:
    pitstop_name:
    pitstop_location:

}

 http://localhost:4000/createpitstop
{
    "tripid" : "BWDT004",
    "pitstop_name" : "salem",
    "pitstop_location" : "salemstd"
}

5. tripalert
{
    tripid:
    alerttype:
    interval:
}

 http://localhost:4000/createalert

{
    "tripid" : "BWDT005",
    "alerttype" : "notification",
    "interval" : "5mins"
}

6. cotraveller

{
    tripid:
    cotraveller_userid:
    cotraveller_name:
    join_location:
}

 http://localhost:4000/createtaveller
{
    "tripid" : "BWDT002",
    "cotraveller_userid" : "DVF",
    "cotraveller_name" : "john",
    "join_location" : "TN"

}

7. trip_images{
    tripid:
    img_name:
}



const express = require('express');
const multer = require('multer');
const GridFsStorage = require('multer-gridfs-storage');
const mongoose = require('mongoose');
const Grid = require('gridfs-stream');
const path = require('path');

// Initialize Express
const app = express();

// Connect to MongoDB
const mongoURI = 'your-mongodb-uri';
mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true });
const conn = mongoose.connection;

// Initialize GridFS stream
let gfs;
conn.once('open', () => {
  gfs = Grid(conn.db, mongoose.mongo);
  gfs.collection('uploads');
});

// Create storage engine
const storage = new GridFsStorage({
  url: mongoURI,
  file: (req, file) => {
    return {
      filename: file.originalname,
      bucketName: 'uploads'
    };
  }
});

const upload = multer({ storage });

// POST route to upload file
app.post('/upload', upload.single('file'), (req, res) => {
  res.json({ file: req.file });
});

// GET route to retrieve file
app.get('/file/:filename', (req, res) => {
  gfs.files.findOne({ filename: req.params.filename }, (err, file) => {
    if (!file || file.length === 0) {
      return res.status(404).json({
        message: 'File not found'
      });
    }

    const readstream = gfs.createReadStream(file.filename);
    readstream.pipe(res);
  });
});

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server started on port ${port}`);
});


const express = require('express');
const multer = require('multer');
const GridFsStorage = require('multer-gridfs-storage');
const mongoose = require('mongoose');
const Grid = require('gridfs-stream');
const path = require('path');

// Initialize Express
const app = express();

// Connect to MongoDB
const mongoURI = 'your-mongodb-uri';
mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true });
const conn = mongoose.connection;

// Initialize GridFS stream
let gfs;
conn.once('open', () => {
  gfs = Grid(conn.db, mongoose.mongo);
  gfs.collection('uploads');
});

// Create storage engine for Multer
const storage = new GridFsStorage({
  url: mongoURI,
  file: (req, file) => {
    return {
      filename: file.originalname,
      bucketName: 'uploads'
    };
  }
});

const upload = multer({ storage });

// Define your schema
const Schema = mongoose.Schema;

const yourSchema = new Schema({
  name: String,
  type: String,
  date: Date,
  image: String // Assuming you'll store the filename in the 'image' field
});

// Create a model based on the schema
const YourModel = mongoose.model('YourModel', yourSchema);

// POST route to upload file and save other fields
app.post('/upload', upload.single('file'), (req, res) => {
  // Create a new document with the file information and other fields
  const newDocument = new YourModel({
    name: req.body.name,
    type: req.body.type,
    date: req.body.date,
    image: req.file.filename // Assuming you're storing the filename in the 'image' field
  });

  // Save the document to the database
  newDocument.save((err, savedDoc) => {
    if (err) {
      return res.status(500).json({ error: err });
    }
    res.json({ document: savedDoc });
  });
});

// GET route to retrieve file
app.get('/file/:filename', (req, res) => {
  gfs.files.findOne({ filename: req.params.filename }, (err, file) => {
    if (!file || file.length === 0) {
      return res.status(404).json({
        message: 'File not found'
      });
    }

    const readstream = gfs.createReadStream(file.filename);
    readstream.pipe(res);
  });
});

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server started on port ${port}`);
});
